{"version":3,"sources":["quickSort.js","Visualization.jsx","bubbleSort.js","App.js","index.js"],"names":["swap","animations","array","indexA","indexB","push","getQuickSortAnimations","auxiliaryArray","slice","doQuickSort","length","console","log","start","end","index","pivotValue","pivotIndex","i","quickSortPartition","Visualization","generateButtonStyle","backgroundColor","color","fontWeight","marginLeft","marginRight","classes","makeStyles","root","minHeight","useStyle","useState","ANIMATION_SPEED_MS","setAnimationSpeed","setArray","disabled","setDisabled","sorted","setSorted","resetArray","Math","floor","random","useEffect","className","Card","CardContent","map","x","idx","style","height","Button","variant","onClick","swapped","temp","doBubbleSort","getBubbleSortAnimations","arrayBar","document","getElementsByClassName","setTimeout","oldPosition","newPosition","oldBarStyle","newBarStyle","tmp","currentPosition","j","k","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.786ab4b1.chunk.js","sourcesContent":["function swap(animations, array, indexA, indexB) {\r\n    [array[indexA], array[indexB]] = [array[indexB], array[indexA]];\r\n    animations.push([indexA, indexB]);\r\n  }\r\n\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  let auxiliaryArray = array.slice();\r\n  doQuickSort(animations, auxiliaryArray, 0, auxiliaryArray.length - 1);\r\n  console.log(animations);\r\n  return animations\r\n}\r\n\r\nexport function quickSortPartition(animations, auxiliaryArray, start, end) {\r\n  var pivotValue = auxiliaryArray[end];\r\n  var pivotIndex = start;\r\n  for (let i = start; i < auxiliaryArray.length; i++) {\r\n    if (auxiliaryArray[i] < pivotValue) {\r\n      swap(animations, auxiliaryArray, i, pivotIndex);\r\n      pivotIndex++\r\n    }\r\n  }\r\n  swap(animations, auxiliaryArray, pivotIndex, end);\r\n  return pivotIndex;\r\n}\r\n\r\nexport function doQuickSort(animations, auxiliaryArray, start, end) {\r\n  if (start >= end) {\r\n    return auxiliaryArray;\r\n  } else {\r\n    let index = quickSortPartition(animations, auxiliaryArray, start, end);\r\n    doQuickSort(animations, auxiliaryArray, start, index - 1);\r\n    doQuickSort(animations, auxiliaryArray, index + 1, end);\r\n  }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {getBubbleSortAnimations} from './bubbleSort'\r\nimport {getQuickSortAnimations, doQuickSort, quickSortPartition} from './quickSort'\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport \"./Visualization.css\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nfunction Visualization() {\r\n  const generateButtonStyle = {\r\n    backgroundColor: '#118ab2',\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    marginLeft: \"5px\",\r\n    marginRight: '5px'\r\n  };\r\n\r\n  const useStyle = makeStyles({\r\n    root: {\r\n      minHeight: 200\r\n    }\r\n  })\r\n\r\n  const classes = useStyle();\r\n\r\n  const [ANIMATION_SPEED_MS, setAnimationSpeed] = useState(100);\r\n  const [array, setArray] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [sorted, setSorted] = useState(false);\r\n  const resetArray = () => {\r\n    setSorted(false);\r\n    const array = [];\r\n    for (let i = 0; i < 50; i++) {\r\n      array.push(Math.floor(Math.random() * 150) + 10);\r\n    }\r\n    setArray(array);\r\n    console.log(array);\r\n  };\r\n\r\n  // generate array on load\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  //bubbleSorting\r\n  const bubbleSort = () => {\r\n    if (sorted === true) {\r\n      return;\r\n    }\r\n    setDisabled(true);\r\n    var animations = getBubbleSortAnimations(array);\r\n    var arrayBar = document.getElementsByClassName(\"individual-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() => {\r\n        // take index of switching position\r\n        var [oldPosition, newPosition] = animations[i];\r\n        // console.log(\"old position \" + oldPosition);\r\n        // console.log(\"new position \" + newPosition);\r\n\r\n        // take style of arrayBar\r\n        var oldBarStyle = arrayBar[oldPosition].style;\r\n        var newBarStyle = arrayBar[newPosition].style;\r\n\r\n        // swap the array value, for example array[oldpos] = 81, array[newpos] = 16\r\n        // after swapping, array[oldpos] = 16, array[newpos] = 81\r\n        // console.log(\"array[oldposition] \" + array[oldPosition]);\r\n        // console.log(\"array[newposition] \" + array[newPosition]);\r\n        var tmp = array[oldPosition];\r\n        array[oldPosition] = array[newPosition];\r\n        array[newPosition] = tmp;\r\n        // console.log(\"array[oldposition] \" + array[oldPosition]);\r\n        // console.log(\"array[newposition] \" + array[newPosition]);\r\n\r\n        oldBarStyle.height = `${array[oldPosition]}px`;\r\n        // console.log(\"oldbarStyle.height = array[oldPosition] = \" + oldBarStyle.height);\r\n        newBarStyle.height = `${array[newPosition]}px`;\r\n        // console.log(\"newbarStyle.height = array[newPosition] = \" + newBarStyle.height);\r\n\r\n        // change color\r\n        oldBarStyle.backgroundColor = \"red\";\r\n        newBarStyle.backgroundColor = \"blue\";\r\n\r\n        var currentPosition = oldPosition;\r\n        for (let j = 0; j < currentPosition; j++) {\r\n          var jBarStyle = arrayBar[j].style;\r\n          jBarStyle.backgroundColor = \"#06d6a0\";\r\n        }\r\n\r\n        if (i === animations.length - 1) {\r\n          for (let k = 0; k < arrayBar.length; k++) {\r\n            arrayBar[k].style.backgroundColor = \"#06d6a0\";\r\n            setDisabled(false);\r\n            setSorted(true);\r\n          }\r\n        }\r\n      }, i * (ANIMATION_SPEED_MS/5));\r\n    }\r\n  }\r\n\r\n  // quickSorting\r\n  const quickSort = () => {\r\n    if (sorted === true) {\r\n      return;\r\n    }\r\n    setDisabled(true);\r\n    // console.log(disabled);\r\n    var animations = getQuickSortAnimations(array)\r\n    console.log(animations)\r\n    var arrayBar = document.getElementsByClassName(\"individual-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() =>{\r\n        // take index of switching position\r\n        var [oldPosition, newPosition] = animations[i];\r\n\r\n        // take style of arrayBar\r\n        var oldBarStyle = arrayBar[oldPosition].style;\r\n        var newBarStyle = arrayBar[newPosition].style;\r\n\r\n        var tmp = array[oldPosition];\r\n        array[oldPosition] = array[newPosition];\r\n        array[newPosition] = tmp;\r\n\r\n        oldBarStyle.height = `${array[oldPosition]}px`;\r\n        newBarStyle.height = `${array[newPosition]}px`;\r\n\r\n        oldBarStyle.backgroundColor = \"red\";\r\n        newBarStyle.backgroundColor = \"blue\";\r\n\r\n        // var [oldPosition, newPosition] = animations[i];\r\n\r\n        // var oldBarStyle = arrayBar[oldPosition].style;\r\n        // var newBarStyle = arrayBar[newPosition].style;\r\n        // var index;\r\n        // const dummyAnimations = [];\r\n        // if (array.length > 1) {\r\n        //   index = quickSortPartition(dummyAnimations, array, 0, array.length - 1); //index returned from partition\r\n        //   if (0 < index - 1) {\r\n        //     //more elements on the left side of the pivot\r\n        //     doQuickSort(dummyAnimations, array, 0, index - 1);\r\n        //   }\r\n        //   if (index < array.length) {\r\n        //     //more elements on the right side of the pivot\r\n        //     doQuickSort(dummyAnimations, array, 0, array.length - 1);\r\n        //   }\r\n        // }\r\n\r\n        // oldBarStyle.height = `${array[oldPosition]}px`;\r\n        // newBarStyle.height = `${array[newPosition]}px`;\r\n\r\n        // oldBarStyle.backgroundColor = \"red\";\r\n        // newBarStyle.backgroundColor = \"blue\";\r\n\r\n        var currentPosition = oldPosition;\r\n        for (let j = 0; j < currentPosition; j++) {\r\n          var jBarStyle = arrayBar[j].style;\r\n          jBarStyle.backgroundColor = \"green\";\r\n        }\r\n\r\n        if (i === animations.length - 1) {\r\n          for (let k = 0; k < arrayBar.length; k++) {\r\n            arrayBar[k].style.backgroundColor = \"#06d6a0\";\r\n            setDisabled(false);\r\n            setSorted(true);\r\n          }\r\n        }\r\n      }, i * ANIMATION_SPEED_MS)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"total-app-holder\">\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <div className=\"bar-container\">\r\n            {array.map((x, idx) => (\r\n              <div\r\n                className=\"individual-bar\"\r\n                key={idx}\r\n                style={{ height: `${x}px` }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      <div className=\"buttons\">\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={resetArray} disabled={disabled}>Generate</Button>\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={bubbleSort} disabled={disabled}>BubbleSort</Button>\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={quickSort} disabled={disabled}>QuickSort</Button>\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={() => {setAnimationSpeed(100)}} disabled={disabled}>Normal Speed</Button>\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={() => {setAnimationSpeed(50)}} disabled={disabled}>X2 Speed</Button>\r\n        <Button variant=\"contained\" style={generateButtonStyle} onClick={() => {setAnimationSpeed(25)}} disabled={disabled}>X4 Speed</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Visualization;","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  doBubbleSort(animations, auxiliaryArray);\r\n  return animations;\r\n}\r\n\r\nexport function doBubbleSort(animations, auxiliaryArray) {\r\n  var swapped;\r\n  do {\r\n    swapped = false;\r\n    for (var i = 0; i < auxiliaryArray.length - 1; i++) {\r\n      if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n        var temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n        auxiliaryArray[i + 1] = temp;\r\n        animations.push([i, i + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n  } while (swapped);\r\n  return auxiliaryArray;\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport Visualization from \"./Visualization\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualization />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}